package com.tree.binarytree.test

import com.tree.binarytree.BinaryTree._
import com.tree.binarytree.BottomViewOfTree.bottomView
object BottomViewOfTreeTest {
  println("Welcome to the Scala worksheet")       //> Welcome to the Scala worksheet
  
  bottomView(tree1)                               //> ArrayBuffer((-7,20), (-6,7), (-5,18), (-4,13), (-3,14), (-2,11), (-1,17), (0
                                                  //| ,16), (1,10), (2,19))
                                                  //| res0: List[Int] = List(20, 7, 18, 13, 14, 11, 17, 16, 10, 19)
  bottomView(childrenSumPropertyTree)             //> ArrayBuffer((-3,2), (-2,2), (-1,3), (0,4), (1,1), (2,4))
                                                  //| res1: List[Int] = List(2, 2, 3, 4, 1, 4)
  bottomView(childrenSumPropertyTree1)            //> ArrayBuffer((-2,3), (-1,8), (0,5), (1,2), (2,2))
                                                  //| res2: List[Int] = List(3, 8, 5, 2, 2)
  bottomView(leftSkewedtree)                      //> ArrayBuffer((-10,11), (-9,10), (-8,9), (-7,8), (-6,7), (-5,6), (-4,5), (-3,4
                                                  //| ), (-2,3), (-1,2), (0,1))
                                                  //| res3: List[Int] = List(11, 10, 9, 8, 7, 6, 5, 4, 3, 2, 1)
  bottomView(rightSkewTree)                       //> ArrayBuffer((0,1), (1,2), (2,3), (3,4), (4,5), (5,6), (6,7), (7,8), (8,9), (
                                                  //| 9,10), (10,11))
                                                  //| res4: List[Int] = List(1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11)
  
  bottomView(balancedtree)                        //> ArrayBuffer((-3,8), (-2,4), (-1,12), (0,6), (1,14), (2,7), (3,15))
                                                  //| res5: List[Int] = List(8, 4, 12, 6, 14, 7, 15)
  bottomView(balancedtree2)                       //> ArrayBuffer((-3,8), (-2,4), (-1,12), (0,6), (1,14), (2,7), (3,15))
                                                  //| res6: List[Int] = List(8, 4, 12, 6, 14, 7, 15)
  bottomView(binarySearchTree)                    //> ArrayBuffer((-2,1), (-1,2), (0,3), (1,5))
                                                  //| res7: List[Int] = List(1, 2, 3, 5)
  bottomView(childrenSumTest)                     //> ArrayBuffer((-2,3), (-1,7), (0,1), (1,2), (2,30))
                                                  //| res8: List[Int] = List(3, 7, 1, 2, 30)
  bottomView(doubleTreeTest1)                     //> ArrayBuffer((-1,2), (0,1), (1,3))
                                                  //| res9: List[Int] = List(2, 1, 3)
  bottomView(doubleTreeTest2)                     //> ArrayBuffer((-2,4), (-1,2), (0,5), (1,3))
                                                  //| res10: List[Int] = List(4, 2, 5, 3)
  bottomView(testTree)                            //> ArrayBuffer((-2,4), (-1,2), (0,5), (1,3))
                                                  //| res11: List[Int] = List(4, 2, 5, 3)
  bottomView(tree2)                               //> ArrayBuffer((-2,4), (-1,10), (0,12), (1,14))
                                                  //| res12: List[Int] = List(4, 10, 12, 14)
  bottomView(sumTreeTest)                         //> ArrayBuffer((-2,8), (-1,-2), (0,7), (1,6), (2,5))
                                                  //| res13: List[Int] = List(8, -2, 7, 6, 5)
  bottomView(isSumtreeTest)                       //> ArrayBuffer((-2,4), (-1,10), (0,6), (1,3), (2,3))
                                                  //| res14: List[Int] = List(4, 10, 6, 3, 3)
  bottomView(isSubSetTreeTest1)                   //> ArrayBuffer((-2,4), (-1,30), (0,6), (1,3), (2,3))
                                                  //| res15: List[Int] = List(4, 30, 6, 3, 3)
  bottomView(isSubSetTreeTest2)                   //> ArrayBuffer((-1,4), (0,30), (1,6))
                                                  //| res16: List[Int] = List(4, 30, 6)
  bottomView(maxSumLeafToRoot)                    //> ArrayBuffer((-2,8), (-1,-2), (0,-4), (1,7))
                                                  //| res17: List[Int] = List(8, -2, -4, 7)
  bottomView(isoMorphismTree1)                    //> ArrayBuffer((-2,4), (-1,7), (0,6), (1,8))
                                                  //| res18: List[Int] = List(4, 7, 6, 8)
  bottomView(isoMorphismTree2)                    //> ArrayBuffer((-1,3), (0,4), (1,8), (2,5), (3,7))
                                                  //| res19: List[Int] = List(3, 4, 8, 5, 7)
  bottomView(bstToBalancedBSTTest1)               //> ArrayBuffer((-2,10), (-1,20), (0,30))
                                                  //| res20: List[Int] = List(10, 20, 30)
  bottomView(bstToBalancedBSTTest2)               //> ArrayBuffer((-3,1), (-2,2), (-1,3), (0,4), (1,5), (2,6), (3,7))
                                                  //| res21: List[Int] = List(1, 2, 3, 4, 5, 6, 7)
  bottomView(bstToBalancedBSTTest)                //> ArrayBuffer((-4,5), (-3,6), (-2,7), (-1,8), (0,10))
                                                  //| res22: List[Int] = List(5, 6, 7, 8, 10)
  bottomView(maxConcurrentIncreasing2)            //> ArrayBuffer((-3,6), (-2,9), (-1,8), (0,5), (1,15), (2,10))
                                                  //| res23: List[Int] = List(6, 9, 8, 5, 15, 10)
  bottomView(maxConcurrentIncreasing)             //> ArrayBuffer((-2,13), (-1,11), (0,13), (1,9), (2,8))
                                                  //| res24: List[Int] = List(13, 11, 13, 9, 8)
  bottomView(pairSumTree)                         //> ArrayBuffer((-2,9), (-1,1), (0,7), (1,3), (2,2))
                                                  //| res25: List[Int] = List(9, 1, 7, 3, 2)
  bottomView(onlyChildren)                        //> ArrayBuffer((-1,2), (0,1), (1,3))
                                                  //| res26: List[Int] = List(2, 1, 3)
  bottomView(sumCoveredAndUncoveredNodes)         //> ArrayBuffer((-2,1), (-1,4), (0,6), (1,3), (2,1))
                                                  //| res27: List[Int] = List(1, 4, 6, 3, 1)
  bottomView(symmetricTree)                       //> ArrayBuffer((-2,3), (-1,2), (0,4), (1,2), (2,3))
                                                  //| res28: List[Int] = List(3, 2, 4, 2, 3)
}